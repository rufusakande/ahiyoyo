const express = require("express");
const User = require("../models/User");
const Country = require("../models/Country");

const {
  sendWhatsAppVerification,
  verifyWhatsAppCode,
} = require("../services/twilioService");
const logger = require("../utils/logger");

const router = express.Router();

router.post("/verify", async (req, res) => {
  try {
    const { email, phone, country } = req.body;

    // ‚úÖ Validation des champs requis en premier
    if (!email || !phone || !country) {
      return res.status(400).json({
        message: "Tous les champs (email, pays, phone) sont requis.",
      });
    }

    // ‚úÖ V√©rifier que le pays existe en base de donn√©es
    const countryData = await Country.findOne({ where: { name: country } });
    if (!countryData) {
      return res.status(400).json({ message: `Pays non autoris√©.` });
    }

    // ‚úÖ Chercher l'utilisateur par email
    const user = await User.findOne({ where: { email } });
    
    // ‚úÖ Si l'utilisateur n'existe pas, le cr√©er
    if (!user) {
      return res.status(400).json({ 
        message: "Utilisateur non trouv√©. Veuillez d'abord cr√©er un compte." 
      });
    }

    // ‚úÖ V√©rifier si ce num√©ro de t√©l√©phone est d√©j√† utilis√© par un autre utilisateur
    const existingPhone = await User.findOne({ 
      where: { 
        phone,
        email: { [require('sequelize').Op.ne]: email } // Exclure l'utilisateur actuel
      } 
    });

    if (existingPhone) {
      return res.status(400).json({ message: "Ce num√©ro de t√©l√©phone est d√©j√† utilis√© par un autre compte." });
    }

    // ‚úÖ V√©rifier si l'utilisateur actuel a d√©j√† un t√©l√©phone v√©rifi√©
    if (user.isPhoneVerified && user.phone === phone) {
      return res.status(400).json({ 
        message: "Ce num√©ro de t√©l√©phone est d√©j√† v√©rifi√© pour votre compte." 
      });
    }

    // ‚úÖ Mettre √† jour les informations de l'utilisateur
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes
    
    await user.update({
      phone: phone,
      country: countryData.name,
      countryCode: countryData.countryCode,
      phoneVerificationExpires: expiresAt,
      isPhoneVerified: false // Reset la v√©rification si nouveau num√©ro
    });

    // ‚úÖ Envoyer le code de v√©rification
    await sendWhatsAppVerification(phone);

    logger.info(`üì± Code de v√©rification envoy√© √† ${phone} pour l'utilisateur ${email}`);
    
    res.json({ message: "Code de v√©rification envoy√© par SMS !" });

  } catch (error) {
    logger.error("‚ùå Erreur dans /verify:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

router.post("/confirm", async (req, res) => {
  try {
    const { phone, code } = req.body;

    // ‚úÖ Validation des champs
    if (!phone || !code) {
      return res.status(400).json({
        message: "Le num√©ro de t√©l√©phone et le code sont requis.",
      });
    }

    // ‚úÖ Chercher l'utilisateur par t√©l√©phone
    const user = await User.findOne({ where: { phone } });

    if (!user) {
      return res.status(400).json({ message: "Aucun utilisateur trouv√© avec ce num√©ro." });
    }

    // ‚úÖ V√©rifier si le t√©l√©phone est d√©j√† v√©rifi√©
    if (user.isPhoneVerified) {
      return res.status(400).json({ 
        message: "Ce num√©ro de t√©l√©phone est d√©j√† v√©rifi√©." 
      });
    }

    // ‚úÖ V√©rifier l'expiration du code
    if (user.phoneVerificationExpires && user.phoneVerificationExpires < new Date()) {
      return res.status(400).json({ 
        message: "Code expir√©. Veuillez en demander un nouveau." 
      });
    }

    // ‚úÖ V√©rifier le code avec Twilio
    const isVerified = await verifyWhatsAppCode(phone, code);
    
    if (!isVerified) {
      return res.status(400).json({ message: "Code invalide ou expir√©." });
    }

    // ‚úÖ Marquer le t√©l√©phone comme v√©rifi√©
    await user.update({
      isPhoneVerified: true,
      phoneVerificationExpires: null
    });

    logger.info(`‚úÖ T√©l√©phone ${phone} v√©rifi√© avec succ√®s pour l'utilisateur ${user.email}`);
    
    res.json({ message: "T√©l√©phone v√©rifi√© avec succ√®s !" });

  } catch (error) {
    logger.error("‚ùå Erreur dans /confirm:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

module.exports = router;