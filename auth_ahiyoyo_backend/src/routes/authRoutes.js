const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const useragent = require("useragent");
const axios = require("axios");
const {verifyToken} = require("../middlewares/verifyToken");
const {
  sendVerificationEmail,
  sendLoginNotification,
  sendPasswordResetEmail,
  sendPasswordChangeConfirmation,
} = require("../services/emailService");

const router = express.Router();
const logger = require("../utils/logger");

// Inscription
router.post("/register", async (req, res) => {
  try {
    logger.info("üü¢ Inscription en cours :", req.body);
    const { email, password } = req.body;

    if (!email || !password) {
      return res
        .status(400)
        .json({
          message:
            "Tous les champs (email, password) sont requis.",
        });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser)
      return res.status(400).json({ message: "Email d√©j√† utilis√©." });

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 10);

    // G√©n√©rer un code de v√©rification email
    const emailVerificationCode = Math.floor(
      100000 + Math.random() * 900000
    ).toString();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes

    // Cr√©er l'utilisateur
    const user = await User.create({
      email,
      password: hashedPassword,
      emailVerificationCode,
      emailVerificationExpires: expiresAt,
    });

    // Envoyer le mail de v√©rification imm√©diatement
    await sendVerificationEmail(email, emailVerificationCode);

    res.status(201).json({
      message: "Inscription r√©ussie ! Code de v√©rification email envoy√©.",
      userId: user.userIdentifier,
    });
  } catch (error) {
    logger.error("‚ùå Erreur lors de l'inscription :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// Connexion
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ where: { email } });

    if (!user)
      return res.status(400).json({ message: "Utilisateur non trouv√©." });
    if (!user.isEmailVerified)
      return res
        .status(400)
        .json({
          message: "Veuillez v√©rifier votre email avant de vous connecter.",
        });
    if (!user.isPhoneVerified)
      return res
        .status(400)
        .json({
          message: "Veuillez v√©rifier votre t√©l√©phone avant de vous connecter.",
        });
    if (!user.isIdentityVerified) {
      if (user.isDocumentSubmitted) {
        return res
          .status(400)
          .json({
            message: "Votre document est soumis et en attente de v√©rification.",
          });
      }
      return res
        .status(400)
        .json({
          message: "Veuillez v√©rifier votre identit√© avant de vous connecter.",
        });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res.status(400).json({ message: "Mot de passe incorrect." });

    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "2h" }
    );

    // üîç R√©cup√©ration des m√©tadonn√©es
    const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
    const userAgent = useragent.parse(req.headers["user-agent"]);
    const deviceInfo = `${userAgent.toString()}`;

    // üåç Obtenir la localisation de l'IP
    let location = { city: "Inconnu", country: "Inconnu", region: "Inconnu" };
    try {
      const response = await axios.get(`http://ip-api.com/json/${ip}`);
      if (response.data.status === "success") {
        location = {
          city: response.data.city,
          country: response.data.country,
          region: response.data.regionName,
        };
      }
    } catch (geoError) {
      logger.error("üåç Erreur r√©cup√©ration localisation IP :", geoError);
    }

    // üìß Envoyer email de connexion
    await sendLoginNotification(email, ip, location, deviceInfo);

    res.json({
      message: "Connexion r√©ussie !",
      token,
    });
  } catch (error) {
    logger.error("‚ùå Erreur lors de la connexion :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// V√©rification du statut des v√©rifications
router.post("/verification-status", async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ 
        message: "L'email est requis pour v√©rifier le statut." 
      });
    }

    const user = await User.findOne({ where: { email } });

    if (!user) {
      return res.status(404).json({ 
        message: "Utilisateur non trouv√©." 
      });
    }

    // Retourner le statut des v√©rifications
    res.json({
      email: user.email,
      verificationStatus: {
        isEmailVerified: user.isEmailVerified || false,
        isPhoneVerified: user.isPhoneVerified || false,
        isIdentityVerified: user.isIdentityVerified || false,
        isDocumentSubmitted: user.isDocumentSubmitted || false,
      },
      // Messages d'aide pour l'utilisateur
      nextSteps: getNextSteps(user)
    });

  } catch (error) {
    logger.error("‚ùå Erreur lors de la v√©rification du statut :", error);
    res.status(500).json({ message: "Erreur serveur lors de la v√©rification du statut." });
  }
});

// Fonction helper pour d√©terminer les prochaines √©tapes
function getNextSteps(user) {
  const steps = [];
  
  if (!user.isEmailVerified) {
    steps.push({
      type: 'email',
      message: 'V√©rifiez votre adresse email',
      action: 'verification'
    });
  } else if (!user.isPhoneVerified) {
    steps.push({
      type: 'phone',
      message: 'V√©rifiez votre num√©ro de t√©l√©phone',
      action: 'verification'
    });
  } else if (!user.isIdentityVerified) {
    if (user.isDocumentSubmitted) {
      steps.push({
        type: 'identity',
        message: 'Votre document est en cours de v√©rification',
        action: 'pending-review'
      });
    } else {
      steps.push({
        type: 'identity',
        message: 'Soumettez vos documents d\'identit√©',
        action: 'verification'
      });
    }
  }

  return steps;
}

// Route pour v√©rifier si l'utilisateur est admin
router.get("/verify-admin", verifyToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // R√©cup√©rer l'utilisateur depuis la base de donn√©es
    const user = await User.findByPk(userId);
    
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }

    // V√©rifier si l'utilisateur a le r√¥le admin
    if (user.role !== 'admin') {
      return res.status(403).json({ 
        message: "Acc√®s refus√©. Privil√®ges administrateur requis.",
        role: user.role 
      });
    }

    // Retourner les informations de l'admin
    res.json({
      message: "Acc√®s administrateur confirm√©.",
      role: user.role,
      user: {
        id: user.id,
        email: user.email,
        userIdentifier: user.userIdentifier,
        firstName: user.firstName,
        lastName: user.lastName
      }
    });

  } catch (error) {
    logger.error("‚ùå Erreur lors de la v√©rification admin :", error);
    res.status(500).json({ message: "Erreur serveur lors de la v√©rification." });
  }
});

// üìß √âTAPE 1 : Demander la r√©initialisation du mot de passe (envoyer le code)
router.post("/forgot-password", async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        message: "L'adresse email est requise."
      });
    }

    // V√©rifier si l'utilisateur existe
    const user = await User.findOne({ where: { email } });
    
    if (!user) {
      // Pour des raisons de s√©curit√©, on ne r√©v√®le pas si l'email existe ou non
      return res.status(200).json({
        message: "Si cette adresse email existe dans notre syst√®me, vous recevrez un code de v√©rification."
      });
    }

    // G√©n√©rer un code de r√©initialisation √† 6 chiffres
    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
    const resetExpires = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

    // Sauvegarder le code dans la base de donn√©es
    await user.update({
      resetPasswordToken: resetCode,
      resetPasswordExpires: resetExpires
    });

    // Envoyer l'email avec le code
    await sendPasswordResetEmail(email, null, resetCode);

    logger.info(`üìß Code de r√©initialisation envoy√© pour: ${email}`);

    res.status(200).json({
      message: "Si cette adresse email existe dans notre syst√®me, vous recevrez un code de v√©rification."
    });

  } catch (error) {
    logger.error("‚ùå Erreur lors de la demande de r√©initialisation :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üîê √âTAPE 2 : V√©rifier le code et r√©initialiser le mot de passe
router.post("/reset-password", async (req, res) => {
  try {
    const { email, resetCode, newPassword } = req.body;

    // Validation des champs obligatoires
    if (!email || !resetCode || !newPassword) {
      return res.status(400).json({
        message: "L'email, le code de v√©rification et le nouveau mot de passe sont requis."
      });
    }

    // Validation basique du mot de passe
    if (newPassword.length < 8) {
      return res.status(400).json({
        message: "Le mot de passe doit contenir au moins 8 caract√®res."
      });
    }

    // Trouver l'utilisateur
    const user = await User.findOne({ 
      where: { email } 
    });

    if (!user) {
      return res.status(400).json({
        message: "Email ou code de v√©rification incorrect."
      });
    }

    // V√©rifier que le code existe et n'a pas expir√©
    if (!user.resetPasswordToken || !user.resetPasswordExpires) {
      return res.status(400).json({
        message: "Aucune demande de r√©initialisation en cours. Veuillez faire une nouvelle demande."
      });
    }

    // V√©rifier l'expiration
    if (new Date() > user.resetPasswordExpires) {
      // Nettoyer les champs expir√©s
      await user.update({
        resetPasswordToken: null,
        resetPasswordExpires: null
      });
      
      return res.status(400).json({
        message: "Le code de v√©rification a expir√©. Veuillez faire une nouvelle demande."
      });
    }

    // V√©rifier le code
    if (user.resetPasswordToken !== resetCode) {
      return res.status(400).json({
        message: "Code de v√©rification incorrect."
      });
    }

    // V√©rifier que le nouveau mot de passe n'est pas identique √† l'ancien
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
      return res.status(400).json({
        message: "Le nouveau mot de passe doit √™tre diff√©rent de l'ancien."
      });
    }

    // Hasher le nouveau mot de passe
    const hashedPassword = await bcrypt.hash(newPassword, 12);

    // Mettre √† jour le mot de passe et supprimer les codes de r√©initialisation
    await user.update({
      password: hashedPassword,
      resetPasswordToken: null,
      resetPasswordExpires: null,
      updatedAt: new Date()
    });

    logger.info(`‚úÖ Mot de passe r√©initialis√© avec succ√®s pour: ${user.email}`);

    // Envoyer un email de confirmation
    try {
      await sendPasswordChangeConfirmation(user.email);
    } catch (emailError) {
      logger.error("‚ùå Erreur envoi email confirmation:", emailError);
      // On continue m√™me si l'email √©choue
    }

    res.status(200).json({
      message: "Mot de passe r√©initialis√© avec succ√®s. Vous pouvez maintenant vous connecter."
    });

  } catch (error) {
    logger.error("‚ùå Erreur lors de la r√©initialisation du mot de passe :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üîÑ √âTAPE 3 : Renvoyer un nouveau code (si l'ancien a expir√© ou est perdu)
router.post("/resend-reset-code", async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        message: "L'adresse email est requise."
      });
    }

    const user = await User.findOne({ where: { email } });
    
    if (!user) {
      return res.status(200).json({
        message: "Si cette adresse email existe dans notre syst√®me, vous recevrez un nouveau code."
      });
    }

    // G√©n√©rer un nouveau code
    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
    const resetExpires = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

    // Mettre √† jour en base
    await user.update({
      resetPasswordToken: resetCode,
      resetPasswordExpires: resetExpires
    });

    // Envoyer le nouveau code
    await sendPasswordResetEmail(email, null, resetCode);

    logger.info(`üîÑ Nouveau code de r√©initialisation envoy√© pour: ${email}`);

    res.status(200).json({
      message: "Un nouveau code de v√©rification a √©t√© envoy√©."
    });

  } catch (error) {
    logger.error("‚ùå Erreur lors du renvoi du code :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìã ROUTE POUR UTILISATEUR CONNECT√â : Changer le mot de passe
router.post("/change-password", verifyToken, async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;
    const userId = req.user.id;

    // Validation des champs
    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        message: "Le mot de passe actuel et le nouveau mot de passe sont requis."
      });
    }

    if (newPassword.length < 8) {
      return res.status(400).json({
        message: "Le nouveau mot de passe doit contenir au moins 8 caract√®res."
      });
    }

    // R√©cup√©rer l'utilisateur
    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        message: "Utilisateur non trouv√©."
      });
    }

    // V√©rifier le mot de passe actuel
    const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        message: "Le mot de passe actuel est incorrect."
      });
    }

    // V√©rifier que le nouveau mot de passe est diff√©rent
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
      return res.status(400).json({
        message: "Le nouveau mot de passe doit √™tre diff√©rent de l'ancien."
      });
    }

    // Hasher et sauvegarder le nouveau mot de passe
    const hashedPassword = await bcrypt.hash(newPassword, 12);
    await user.update({
      password: hashedPassword,
      updatedAt: new Date()
    });

    logger.info(`üîê Mot de passe chang√© avec succ√®s pour: ${user.email}`);

    // Envoyer un email de confirmation
    try {
      await sendPasswordChangeConfirmation(user.email);
    } catch (emailError) {
      logger.error("‚ùå Erreur envoi email confirmation:", emailError);
    }

    res.status(200).json({
      message: "Mot de passe modifi√© avec succ√®s."
    });

  } catch (error) {
    logger.error("‚ùå Erreur lors du changement de mot de passe :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

module.exports = router;