// src/routes/auth.js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const {sendVerificationEmail, sendLoginNotification } = require('../services/emailService');
const sendWhatsAppCode = require('../services/whatsappService');
const { sendWhatsAppVerification, verifyWhatsAppCode } = require("../services/twilioService");
const { upload } = require('../services/fileService');  // Importer le service d'upload
const axios = require("axios");
const useragent = require("useragent");


require('dotenv').config();

const router = express.Router();



// Inscription
router.post('/register', async (req, res) => {
    try {
        console.log("üü¢ Inscription en cours :", req.body);
        const { email, phone, password } = req.body;

        // V√©rifier si l'utilisateur existe d√©j√†
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) return res.status(400).json({ message: "Email d√©j√† utilis√©." });

        // Hasher le mot de passe
        const hashedPassword = await bcrypt.hash(password, 10);

        // G√©n√©rer un code de v√©rification email
        const emailVerificationCode = Math.floor(100000 + Math.random() * 900000).toString();

        // Cr√©er l'utilisateur
        const user = await User.create({ 
            email, 
            phone, 
            password: hashedPassword,
            emailVerificationCode
        });

        // Envoyer le mail de v√©rification imm√©diatement
        await sendVerificationEmail(email, emailVerificationCode);

        res.status(201).json({ 
            message: "Inscription r√©ussie ! Code de v√©rification email envoy√©.", 
            userId: user.id 
        });

    } catch (error) {
        console.error("‚ùå Erreur lors de l'inscription :", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});
// Connexion
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ where: { email } });

        if (!user) return res.status(400).json({ message: "Utilisateur non trouv√©." });
        if (!user.isEmailVerified) return res.status(400).json({ message: "Veuillez v√©rifier votre email avant de vous connecter." });
        if (!user.isPhoneVerified) return res.status(400).json({ message: "Veuillez v√©rifier votre t√©l√©phone avant de vous connecter." });
        if (!user.isIdentityVerified) {
            if (user.isDocumentSubmitted) {
                return res.status(400).json({ message: "Votre document est soumis et en attente de v√©rification." });
            }
            return res.status(400).json({ message: "Veuillez v√©rifier votre identit√© avant de vous connecter." });
        }
        
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: "Mot de passe incorrect." });

        const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: "2h" });

        // üîç R√©cup√©ration des m√©tadonn√©es
        const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
        const userAgent = useragent.parse(req.headers["user-agent"]);
        const deviceInfo = `${userAgent.toString()}`;

        // üåç Obtenir la localisation de l'IP
        let location = { city: "Inconnu", country: "Inconnu", region: "Inconnu" };
        try {
            const response = await axios.get(`http://ip-api.com/json/${ip}`);
            if (response.data.status === "success") {
                location = {
                    city: response.data.city,
                    country: response.data.country,
                    region: response.data.regionName,
                };
            }
        } catch (geoError) {
            console.error("üåç Erreur r√©cup√©ration localisation IP :", geoError);
        }

        // üìß Envoyer email de connexion
        await sendLoginNotification(email, ip, location, deviceInfo);

        res.json({ message: "Connexion r√©ussie !", token });
    } catch (error) {
        console.error("‚ùå Erreur lors de la connexion :", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});



// verify-email
router.post('/verify-email', async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ where: { email } });

        if (!user) return res.status(400).json({ message: "Utilisateur non trouv√©." });

        const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
        user.emailVerificationCode = verificationCode;
        await user.save();

        
        if (user.isEmailVerified) {
            return res.status(400).json({ message: "Email d√©j√† v√©rifi√©." });
        }

        // Envoi du mail
        await sendVerificationEmail(email, verificationCode);

        res.json({ message: "Code de v√©rification envoy√© !" });
    } catch (error) {
        console.error("‚ùå Erreur v√©rification email:", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});

//confirm-email
router.post('/confirm-email', async (req, res) => {
    try {
        const { email, code } = req.body;
        const user = await User.findOne({ where: { email } });

        if (!user) return res.status(400).json({ message: "Utilisateur non trouv√©." });

        if (user.emailVerificationCode !== code && !user.isEmailVerified) {
            return res.status(400).json({ message: "Code invalide." });
        } 
        if (user.isEmailVerified) {
            return res.status(400).json({ message: "Email d√©j√† v√©rifi√©." });
        }

        // Marquer l'email comme v√©rifi√©
        user.isEmailVerified = true;
        user.emailVerificationCode = null;
        await user.save();

        res.json({ message: "Email v√©rifi√© avec succ√®s !" });

    } catch (error) {
        console.error("‚ùå Erreur confirmation email:", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});

//verify-phone
router.post("/verify-phone", async (req, res) => {
    try {
        const { phone } = req.body;
        const user = await User.findOne({ where: { phone } });

        if (!user) return res.status(400).json({ message: "Utilisateur non trouv√©." });
        if (!user.isEmailVerified) return res.status(400).json({ message: "Veuillez v√©rifier votre email d'abord." });

        if (user.isPhoneVerified) {
            return res.status(400).json({ message: "T√©l√©phone d√©j√† v√©rifi√©." });
        }

        await sendWhatsAppVerification(phone);

        res.json({ message: "Code WhatsApp envoy√© !" });
    } catch (error) {
        console.error("‚ùå Erreur envoi WhatsApp:", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});


//confirm-phone
router.post("/confirm-phone", async (req, res) => {
    try {
        const { phone, code } = req.body;
        const user = await User.findOne({ where: { phone } });

        if (!user) return res.status(400).json({ message: "Utilisateur non trouv√©." });

        if (user.isPhoneVerified) {
            return res.status(400).json({ message: "T√©l√©phone d√©j√† v√©rifi√©." });
        }

        const isVerified = await verifyWhatsAppCode(phone, code);
        if (!isVerified) return res.status(400).json({ message: "Code invalide ou expir√©." });

        user.isPhoneVerified = true;
        await user.save();

        res.json({ message: "T√©l√©phone v√©rifi√© avec succ√®s !" });
    } catch (error) {
        console.error("‚ùå Erreur v√©rification WhatsApp:", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});



// Route pour uploader un fichier
router.post('/upload-identity', upload.single('document'), async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ where: { email } });

        if (!user) {
            return res.status(400).json({ message: "Utilisateur non trouv√©." });
        }

        if (!user.isEmailVerified || !user.isPhoneVerified) {
            return res.status(400).json({ message: "Veuillez v√©rifier votre email et votre t√©l√©phone avant d'envoyer un document." });
        }

        if (user.isIdentityVerified) {
            return res.status(400).json({ message: "Votre identit√© a d√©j√† √©t√© v√©rifi√©e." });
        }

        if (user.isDocumentSubmitted) {
            return res.status(400).json({ message: "Votre document a d√©j√† √©t√© soumis." });
        }

        // V√©rifiez si un fichier a bien √©t√© envoy√©
        if (!req.file) {
            return res.status(400).json({ message: "Aucun fichier n'a √©t√© envoy√©." });
        }

        // Sauvegarder le document
        user.isDocumentSubmitted = true;
        user.identityDocument = req.file.path;  // Le chemin du fichier t√©l√©charg√©
        await user.save();

        res.json({ message: "Document soumis avec succ√®s !" });
    } catch (error) {
        console.error("‚ùå Erreur upload document:", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
});


module.exports = router;
